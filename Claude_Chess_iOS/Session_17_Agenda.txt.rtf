{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red140\green132\blue255;}
{\*\expandedcolortbl;;\csgray\c0;\cssrgb\c61800\c61007\c100000;}
\margl1440\margr1440\vieww20720\viewh14300\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs36 \cf2 \CocoaLigature0 Session 17 Agenda - Stockfish AI Integration into Gameplay
\f1\b0 \
\
  
\f0\b Context:
\f1\b0 \
\
  Session 16 completed the Stockfish engine foundation with all tests\
  passing on all platforms (macOS/iOS simulators, real iPhone 14 Pro). The\
  engine is production-ready but not yet integrated into actual gameplay.\
  Session 17 will connect the engine to ChessGame and enable playing against\
   AI.\
\
  ---\
  
\f0\b Objectives (In Priority Order):
\f1\b0 \
\
  
\f0\b 1. Integrate StockfishEngine into ChessGame Model (45-60 min)
\f1\b0 \
\
  
\f0\b Tasks:
\f1\b0 \
  - Add \cf3 var engine: StockfishEngine?\cf2  property to ChessGame\
  - Add \cf3 var isAIOpponent: Bool\cf2  computed property (checks @AppStorage\
  selectedEngine == "stockfish")\
  - Add \cf3 func initializeEngine() async throws\cf2  method\
    - Read skill level from @AppStorage("stockfishSkillLevel")\
    - Create and initialize StockfishEngine\
    - Handle initialization errors with user alerts\
  - Add \cf3 func shutdownEngine() async\cf2  method\
    - Call on New Game, game end, app termination\
    - Ensure proper cleanup\
  - Add \cf3 func getAIMove() async throws -> Move?\cf2  method\
    - Convert current board to FEN using existing logic\
    - Call \cf3 engine.getBestMove(position: fen, timeLimit: nil)\cf2  for depth-based\
   search\
    - Parse UCI move string (e.g., "e2e4") to Move struct\
    - Handle promotion moves (5-character UCI like "e7e8q")\
  - Update \cf3 newGame()\cf2  to initialize engine if opponent is Stockfish\
  - Update game-end handlers to shutdown engine\
\
  
\f0\b Success Criteria:
\f1\b0 \
  - Engine initializes when starting new game with Stockfish opponent\
  - Engine returns valid moves for current position\
  - Engine shuts down cleanly on game end\
  - Zero crashes or hangs\
\
  ---\
  
\f0\b 2. Add AI Move Automation to Game Flow (45-60 min)
\f1\b0 \
\
  
\f0\b Tasks:
\f1\b0 \
  - Detect AI turn after human moves complete\
    - Check \cf3 currentPlayer\cf2  and \cf3 isAIOpponent\cf2 \
  - Add "AI is thinking..." visual indicator\
    - Show in ContentView header or as overlay\
    - Prevent user interaction during AI thinking\
  - Call \cf3 getAIMove()\cf2  asynchronously\
    - Use Task \{ \} wrapper\
    - Handle errors gracefully with alerts\
  - Execute AI move automatically\
    - Use existing \cf3 makeMove()\cf2  or \cf3 execute_move()\cf2  logic\
    - Handle promotion (AI selects piece via UCI notation)\
    - Update board display\
    - Switch to human's turn\
  - Handle edge cases:\
    - AI has no legal moves (checkmate/stalemate)\
    - Engine returns invalid move (shouldn't happen, but log error)\
    - User undoes during AI thinking (cancel AI task)\
\
  
\f0\b Success Criteria:
\f1\b0 \
  - AI responds immediately after human move\
  - "Thinking" indicator appears and disappears appropriately\
  - AI makes legal moves\
  - Promotion works automatically (no picker for AI)\
  - Board updates smoothly\
\
  ---\
  
\f0\b 3. Time Controls Integration with AI (30-45 min)
\f1\b0 \
\
  
\f0\b Tasks:
\f1\b0 \
  - Modify \cf3 getAIMove()\cf2  to respect time controls when enabled\
    - Check \cf3 game.timeControlsEnabled\cf2 \
    - Calculate time limit: \cf3 (remainingTime * 1000) / 20\cf2  milliseconds\
    - Clamp between 500ms and 10000ms (terminal project behavior)\
    - Pass \cf3 timeLimit\cf2  to \cf3 engine.getBestMove()\cf2 \
  - Ensure AI time burns from its clock, not human's\
  - Test with different time control settings\
\
  
\f0\b Success Criteria:
\f1\b0 \
  - With time controls disabled (0/0): AI uses depth-based search (fast)\
  - With time controls enabled: AI uses ~1/20th of remaining time\
  - AI time decreases appropriately after each move\
  - Time forfeit works if AI runs out of time\
\
  ---\
  
\f0\b 4. Testing & Validation (30-45 min)
\f1\b0 \
\
  
\f0\b Play Multiple Games:
\f1\b0 \
  1. 
\f0\b Skill Level 0
\f1\b0  - AI should play weakly, make obvious mistakes\
  2. 
\f0\b Skill Level 5
\f1\b0  - Casual strength (default)\
  3. 
\f0\b Skill Level 10
\f1\b0  - Intermediate\
  4. 
\f0\b Skill Level 20
\f1\b0  - Maximum strength\
\
  
\f0\b Edge Case Testing:
\f1\b0 \
  - AI handles check/checkmate/stalemate correctly\
  - AI performs castling when legal\
  - AI captures en passant when available\
  - AI promotes pawns (automatically selects Queen or best piece)\
  - Undo works (disables AI for remainder of game? Or allow?)\
  - New Game properly resets engine state\
\
  
\f0\b Platform Testing:
\f1\b0 \
  - macOS simulator (attached to Xcode)\
  - iOS simulator\
  - Real iPhone 14 Pro\
\
  
\f0\b Success Criteria:
\f1\b0 \
  - Can complete full games at all skill levels\
  - Noticeably different play strength between levels\
  - All chess rules work correctly with AI\
  - No crashes, hangs, or UI freezes\
  - Zero warnings maintained\
\
  ---\
  
\f0\b 5. UI Polish & User Experience (15-30 min - if time permits)
\f1\b0 \
\
  
\f0\b Optional Enhancements:
\f1\b0 \
  - Add haptic feedback when AI moves\
  - Animate AI piece movement (brief highlight or slide animation)\
  - Show AI's evaluation score in header (centipawns or scaled)\
  - Display last move indicator (highlight from/to squares)\
\
  ---\
  
\f0\b Files to Modify:
\f1\b0 \
\
  
\f0\b Primary:
\f1\b0 \
  - \cf3 Models/ChessGame.swift\cf2  - Engine integration, AI move logic\
  - \cf3 Views/ContentView.swift\cf2  - AI thinking indicator, move automation trigger\
  - \cf3 Views/ChessBoardView.swift\cf2  - Possible AI move animation\
\
  
\f0\b Secondary (if needed):
\f1\b0 \
  - \cf3 Models/MoveValidator.swift\cf2  - UCI move string parser (may already exist)\
  - \cf3 Views/QuickGameMenuView.swift\cf2  - New Game integration\
\
  ---\
  
\f0\b Estimated Time:
\f1\b0 \
\
  - 
\f0\b Steps 1-2:
\f1\b0  90-120 minutes (core integration)\
  - 
\f0\b Step 3:
\f1\b0  30-45 minutes (time controls)\
  - 
\f0\b Step 4:
\f1\b0  30-45 minutes (testing)\
  - 
\f0\b Step 5:
\f1\b0  15-30 minutes (polish, optional)\
  - 
\f0\b Total:
\f1\b0  2.5-4 hours of development work\
\
  ---\
  
\f0\b Success Criteria for Session 17:
\f1\b0 \
\
  - \uc0\u9989  Can start a new game against Stockfish AI\
  - \uc0\u9989  AI responds automatically after human moves\
  - \uc0\u9989  Can play complete games to checkmate/stalemate\
  - \uc0\u9989  Different skill levels produce different play strength\
  - \uc0\u9989  Time controls work with AI moves (when enabled)\
  - \uc0\u9989  No crashes, hangs, or performance issues\
  - \uc0\u9989  Zero compilation warnings maintained\
  - \uc0\u9989  Tested on macOS/iOS simulators and real device\
\
  ---\
  
\f0\b Known Challenges:
\f1\b0 \
\
  1. 
\f0\b UCI Move Parsing
\f1\b0  - Need to convert "e2e4" strings to Move structs\
  2. 
\f0\b Promotion Handling
\f1\b0  - AI promotion (automatic) vs human (picker)\
  3. 
\f0\b Async/Await UI Updates
\f1\b0  - Ensure board updates on main thread\
  4. 
\f0\b Engine Lifecycle
\f1\b0  - Proper initialization/shutdown timing\
  5. 
\f0\b Undo Integration
\f1\b0  - Decide if AI games allow undo (terminal disables it)\
\
  ---\
  
\f0\b Reference Documentation:
\f1\b0 \
\
  - Terminal project: \cf3 ../CLAUDE.md\cf2  - UCI protocol, AI move logic\
  - Terminal project: \cf3 stockfish.c\cf2  - \cf3 get_best_move()\cf2  implementation\
  - Session 16 notes: Engine foundation, testing results\
  - ChessEngine protocol: Interface for all engines\
\
  ---\
  
\f0\b Post-Session Tasks:
\f1\b0 \
\
  - Update CLAUDE.md with Session 17 progress\
  - Update README.md latest progress\
  - Verify TODO tracking (expect some TODOs to be completed)\
  - Generate commit message\
  - User testing: Play several complete games\
\
}